version: '3.8'

# Airflow configuration for local development
x-airflow-common:
  &airflow-common
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:slim-2.8.2-python3.10}
  build:
    context: ./services/airflow
    dockerfile: airflow.Dockerfile
  image: airflow-ml:v2.8.2
  env_file:
      - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:${PG_AIRFLOW_PWD}@postgres/airflow_db
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    PG_PREDICTION_PWD: ${PG_PREDICTION_PWD}
  volumes:
    - ${PROJECT_PATH:-.}/airflow/dags:/opt/airflow/dags
    - ${PROJECT_PATH:-.}/airflow/logs:/opt/airflow/logs
    #- ${PROJECT_DIR:-.}/airflow/config:/opt/airflow/config
    #- ${PROJECT_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - ${PROJECT_PATH:-.}/services/airflow/set-airflow-vars-conns.sh:/opt/airflow/set-airflow-vars-conns.sh
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  #---------------------------------------------------------------------------------------------------------------------------------#
  # Main Postgres server
  #---------------------------------------------------------------------------------------------------------------------------------#
  postgres:
    image: postgres:15-alpine
    container_name: postgres_server
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 5s
      interval: 5s
      retries: 5
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/postgres/docker_pg_init.sh:/docker-entrypoint-initdb.d/docker_pg_init.sh
    ports:
      - 5432:5432
  
  #---------------------------------------------------------------------------------------------------------------------------------#
  # PgAdmin Client
  #---------------------------------------------------------------------------------------------------------------------------------#
  pgadmin:
    image: dpage/pgadmin4:8.3
    container_name: pgadmin_client
    restart: always
    env_file:
      - .env
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - 8888:80
    depends_on:
      - postgres

  #---------------------------------------------------------------------------------------------------------------------------------#
  # Airflow Services
  #---------------------------------------------------------------------------------------------------------------------------------#
  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: >
      bash -c "/opt/airflow/set-airflow-vars-conns.sh &&
      exec /entrypoint airflow webserver"
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  # Airflow Init Service
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  # Airflow Cli
  airflow-cli:
    <<: *airflow-common
    container_name: airflow_cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  #---------------------------------------------------------------------------------------------------------------------------------#
  # MLflow Tracking Server
  #---------------------------------------------------------------------------------------------------------------------------------#
  mlflow-server:
    build:
      context: ./services/mlflow
      dockerfile: mlflow.Dockerfile
    image: mlflow-server:v2.12.2
    container_name: mlflow_server
    env_file:
      - .env
    environment:
      #- AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      #- AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
      - MLFLOW_S3_IGNORE_TLS=true
      - BACKEND_STORE_URI=postgresql://mlflow_user:${PG_MLFLOW_PWD}@postgres:5432/mlflow_db
    ports:
      - 5000:5000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  #--------------------------------------------------------------------------------------------------------------------------------------#
  # MinIO - Storage Service
  #--------------------------------------------------------------------------------------------------------------------------------------#
  s3:
    image: minio/minio:RELEASE.2024-06-29T01-20-47Z
    container_name: minio_s3
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
  
  create_buckets:
    image: minio/mc:RELEASE.2024-07-03T20-17-25Z
    container_name: minio_create_buckets
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc policy download s3/${MLFLOW_BUCKET_NAME};
      exit 0; '
    depends_on:
      - s3

  #--------------------------------------------------------------------------------------------------------------------------------------#
  # Grafana Dashboard Server
  #--------------------------------------------------------------------------------------------------------------------------------------#
  grafana:
    image: grafana/grafana-enterprise:11.0.1
    container_name: grafana
    user: "472"
    env_file:
      - .env
    volumes:
      - ./config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./config/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./dashboards:/opt/grafana/dashboards
    ports:
      - "3000:3000"
    restart: always 

  #--------------------------------------------------------------------------------------------------------------------------------------#
  # Prediction API EndPoint
  #--------------------------------------------------------------------------------------------------------------------------------------#
  #api-endpoint:
  #  build:
  #    context: ./services/api-prediction
  #    dockerfile: api.Dockerfile
  #  image: api-prediction:v1
  #  container_name: api_endpoint
  #  environment:
  #    - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
  #    - MODEL_NAME=${MODEL_NAME}
  #    - MODEL_ALIAS=${MODEL_ALIAS}
  #    - DATABASE_URL=postgresql://prediction_user:${PG_PREDICTION_PWD}@postgres:5432/prediction_db
  #  ports:
  #    - 8000:8000
  #  restart: always
  #  depends_on:
  #    - mlflow-server
  #    - postgres

volumes:
  postgres_data:
  pgadmin_data:
  minio_data: